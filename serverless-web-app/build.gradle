import java.text.SimpleDateFormat

group 'gardenmanager'
version projectVersion

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 11

repositories {
    mavenCentral()
    maven {
        url 'https://s3-us-west-2.amazonaws.com/dynamodb-local/release'
    }
}

dependencies {
    implementation project(':back-end')
    implementation platform('software.amazon.awssdk:bom:2.5.29')
    implementation 'software.amazon.awssdk:dynamodb'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.0'
    implementation 'com.amazonaws:aws-lambda-java-events:2.2.7'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
    implementation 'org.apache.httpcomponents:httpclient:4.5.6'
    runtimeOnly 'org.slf4j:jcl-over-slf4j:1.7.25'
    runtimeOnly 'org.slf4j:jul-to-slf4j:1.7.25'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation('com.amazonaws:DynamoDBLocal:1.13.5') {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
    }
    testImplementation 'org.slf4j:jcl-over-slf4j:1.7.25'
    testImplementation 'org.slf4j:jul-to-slf4j:1.7.25'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    testImplementation 'com.amazonaws:aws-lambda-java-log4j2:1.1.0'
    testImplementation 'com.almworks.sqlite4java:sqlite4java:1.0.392'
}

task copyNativeLibs(type: Copy) {
    from(configurations.testRuntimeClasspath) {
        include '*.dll'
        include '*.dylib'
        include '*.jnilib'
        include '*.so'
    }
    into "$buildDir/native-libs"
}

test {
    dependsOn copyNativeLibs
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    environment 'NATIVE_LIBS_DIR', "$buildDir/native-libs"
    environment 'APP_ENV_NAME', 'local'
}

static def bundleSuffix() {
    SimpleDateFormat format = new SimpleDateFormat('yyyyMMddHHmmss')
    InetAddress.getLocalHost().getHostName() + '-' + format.format(new Date())
}

task lambdaFunctionBundle(type: Zip) {
    archiveFileName = "source-bundle-${bundleSuffix()}.zip"
    from compileJava
    from processResources
}

task lambdaLayerBundle(type: Zip) {
    archiveFileName = "lambda-layer-${bundleSuffix()}.zip"
    into('java/lib') {
        from configurations.runtimeClasspath
    }
}

task copyDeps(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/dependencies"
}

def nativeImageClasspath() {
    def libsDir = new File(buildDir, 'libs')
    def depsDir = new File(buildDir, 'dependencies')
    def allFiles = (libsDir.listFiles() ?: []) + (depsDir.listFiles() ?: [])
    def allFilesOnContainer = allFiles.collect { it.absolutePath.replace(projectDir.absolutePath, '/work') }
    return allFilesOnContainer.join(':')
}

task nativeImage(type: Exec) {
    dependsOn build, copyDeps

    workingDir projectDir

    commandLine './build-with-docker', projectDir.absolutePath, nativeImageClasspath(),
            'gardenmanager.webapp.Main', 'bootstrap'
}

task zipImage(type: Zip) {
    dependsOn nativeImage

    archiveFileName = "source-runtime-${bundleSuffix()}.zip"

    from ("$buildDir/lambda/") {
        include 'bootstrap'
    }
}

build.dependsOn lambdaFunctionBundle, lambdaLayerBundle
