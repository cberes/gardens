---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Serverless web app"

Parameters:
  AppPrefix:
    Type: String
    Description: Prefix for resource names (preferably kebab-case)

  EnvironmentName:
    Type: String
    Description: Short, alphabetic-only name for environment (e.g., test, prod, gwashington)

  BusinessName:
    Type: String
    Description: >-
      Name of the business. Will be used in things like the email-verification email.

  DomainName:
    Type: String
    Description: >-
      Domain name at which the static website is available

  StagingBucketName:
    Type: String
    Description: >-
      The name of an S3 bucket that can be used for storing zip files that hold the
      compiled code and jars that the Lambda functions use.

  LambdaLayerBundleName:
    Type: String
    Description: >-
      The file name of the bundle for the lambda layer; this is a .zip file produced by
      the build. This template assumes it's been staged in s3://[StagingBucketName]/web-app-dist

  LambdaBundleName:
    Type: String
    Description: >-
      The file name of the bundle for the lambda functions; this is a .zip file produced by
      the build. This template assumes it's been staged in s3://[StagingBucketName]/web-app-dist

Conditions:

  InLiveEnv: !Equals [!Ref EnvironmentName, live]

  InTestEnv: !Not [!Equals [!Ref EnvironmentName, live]]
      
Resources:

  RuntimeClassPathLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Description: Java dependencies for the Serverless web app lambda functions.
      LayerName: !Join ['-', ['web-app-deps', !Ref EnvironmentName]]
      CompatibleRuntimes:
        - java11
      Content:
        S3Bucket: !Ref StagingBucketName
        S3Key: !Join ['/', ['web-app-dist', !Ref LambdaLayerBundleName]]

# region Roles
  WebAppLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['_', [!Join ['_', !Split ['-', !Ref AppPrefix]], 'lambda_role', !Ref EnvironmentName]]
      MaxSessionDuration: 43200 # 12 Hours
      Path: !Sub '/${AppPrefix}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # Canned policies that allow the Lambda functions to log to Cloudwatch and XRay
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        # The policy document specifies what the Lambda functions
        # (or anything else that assumes the role) are allowed to do in AWS.
        - PolicyName: !Join ['_', [!Join ['_', !Split ['-', !Ref AppPrefix]], 'lambda_policies']]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt GardenerTable.Arn
                  - !Join ['/', [!GetAtt GardenerTable.Arn, 'index/*']]
                  - !GetAtt SpeciesTable.Arn
                  - !Join ['/', [!GetAtt SpeciesTable.Arn, 'index/*']]
                  - !GetAtt PlantTable.Arn
                  - !Join ['/', [!GetAtt PlantTable.Arn, 'index/*']]
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AppPrefix}-*-${EnvironmentName}'
              - Effect: Allow
                Action:
                  - lambda:GetLayerVersion
                Resource:
                  - !Ref RuntimeClassPathLambdaLayer
# endregion Roles

# region Dynamo
  GardenerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['_', ["GARDENER", !Ref EnvironmentName]]
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"

  SpeciesTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "GardenerTable"
    Properties:
      TableName: !Join ['_', ["SPECIES", !Ref EnvironmentName]]
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: "GARDENER_ID"
          AttributeType: "S"
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "GARDENER_ID"
          KeyType: "HASH"
        - AttributeName: "ID"
          KeyType: "RANGE"

  PlantTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "SpeciesTable"
    Properties:
      TableName: !Join ['_', ["PLANT", !Ref EnvironmentName]]
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: "GARDENER_ID"
          AttributeType: "S"
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "GARDENER_ID"
          KeyType: "HASH"
        - AttributeName: "ID"
          KeyType: "RANGE"
# endregion Dynamo

# region Cognito
  WebAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ['-', [!Ref AppPrefix, 'user-pool']]
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: 'verified_email'
      AutoVerifiedAttributes: 
        - 'email'
      EmailConfiguration:
        EmailSendingAccount: 'COGNITO_DEFAULT'
      EmailVerificationSubject: !Sub '${BusinessName} email verification'
      EmailVerificationMessage: !Sub >-
        Thank you for creating your ${BusinessName} account!

        Please use this code to confirm your account: {####}
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema: 
        - Name: 'email'
          AttributeDataType: 'String'
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolAddOns:
        AdvancedSecurityMode: 'OFF'

  WebAppUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Join ['-', [!Ref AppPrefix, 'user-pool-client']]
      UserPoolId: !Ref WebAppUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - 'ALLOW_CUSTOM_AUTH'
        - 'ALLOW_USER_SRP_AUTH'
        - 'ALLOW_REFRESH_TOKEN_AUTH'
      PreventUserExistenceErrors: 'ENABLED'
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
        - 'COGNITO'
# endregion Cognito

# region Lambda
  ReadAllPlantsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['-', [!Ref AppPrefix, 'read-all-plants', !Ref EnvironmentName]]
      Description: Reads all of a user's plant species and plants after receiving HTTP GET from front end
      Code:
        S3Bucket: !Ref StagingBucketName
        S3Key: !Join [ '/', [ 'web-app-dist', !Ref LambdaBundleName ] ]
      Handler: gardenmanager.webapp.Lambdas$LiveReadAllPlantsLambda::handleRequest
      Layers:
        - !Ref RuntimeClassPathLambdaLayer
      Environment:
        Variables:
          APP_ENV_NAME: !Ref EnvironmentName
      MemorySize: 256 # megabytes
      Role: !GetAtt WebAppLambdaRole.Arn
      Runtime: java11
      Timeout: 120
      TracingConfig:
        Mode: Active

  ReadPlantsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['-', [!Ref AppPrefix, 'read-plants', !Ref EnvironmentName]]
      Description: Reads one of a user's plant species and plants after receiving HTTP GET from front end
      Code:
        S3Bucket: !Ref StagingBucketName
        S3Key: !Join ['/', ['web-app-dist', !Ref LambdaBundleName]]
      Handler: gardenmanager.webapp.Lambdas$LiveReadPlantsLambda::handleRequest
      Layers:
        - !Ref RuntimeClassPathLambdaLayer
      Environment:
        Variables:
          APP_ENV_NAME: !Ref EnvironmentName
      MemorySize: 256 # megabytes
      Role: !GetAtt WebAppLambdaRole.Arn
      Runtime: java11
      Timeout: 120
      TracingConfig:
        Mode: Active

  ReadGardenListLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['-', [!Ref AppPrefix, 'read-gardens', !Ref EnvironmentName]]
      Description: Reads all of a user's gardens after receiving HTTP GET from front end
      Code:
        S3Bucket: !Ref StagingBucketName
        S3Key: !Join ['/', ['web-app-dist', !Ref LambdaBundleName]]
      Handler: gardenmanager.webapp.Lambdas$LiveReadGardenListLambda::handleRequest
      Layers:
        - !Ref RuntimeClassPathLambdaLayer
      Environment:
        Variables:
          APP_ENV_NAME: !Ref EnvironmentName
      MemorySize: 256 # megabytes
      Role: !GetAtt WebAppLambdaRole.Arn
      Runtime: java11
      Timeout: 120
      TracingConfig:
        Mode: Active

  EditPlantsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['-', [!Ref AppPrefix, 'edit-plants', !Ref EnvironmentName]]
      Description: Creates or updates a user's plant species and plants after receiving HTTP POST from front end
      Code:
        S3Bucket: !Ref StagingBucketName
        S3Key: !Join ['/', ['web-app-dist', !Ref LambdaBundleName]]
      Handler: gardenmanager.webapp.Lambdas$LiveEditPlantsLambda::handleRequest
      Layers:
        - !Ref RuntimeClassPathLambdaLayer
      Environment:
        Variables:
          APP_ENV_NAME: !Ref EnvironmentName
      MemorySize: 256 # megabytes
      Role: !GetAtt WebAppLambdaRole.Arn
      Runtime: java11
      Timeout: 120
      TracingConfig:
        Mode: Active

  DeleteSpeciesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['-', [!Ref AppPrefix, 'delete-species', !Ref EnvironmentName]]
      Description: Deletes a user's plant species and all associated plants after receiving HTTP POST from front end
      Code:
        S3Bucket: !Ref StagingBucketName
        S3Key: !Join ['/', ['web-app-dist', !Ref LambdaBundleName]]
      Handler: gardenmanager.webapp.Lambdas$LiveEditPlantsLambda::handleRequest
      Layers:
        - !Ref RuntimeClassPathLambdaLayer
      Environment:
        Variables:
          APP_ENV_NAME: !Ref EnvironmentName
      MemorySize: 256 # megabytes
      Role: !GetAtt WebAppLambdaRole.Arn
      Runtime: java11
      Timeout: 120
      TracingConfig:
        Mode: Active

  ReadAllPlantsLambdaAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ReadAllPlantsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GardenManagerRestAPI}/*/*/*'

  ReadPlantsLambdaAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ReadPlantsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GardenManagerRestAPI}/*/*/*'

  ReadGardenListLambdaAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ReadGardenListLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GardenManagerRestAPI}/*/*/*'

  EditPlantsLambdaAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt EditPlantsLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GardenManagerRestAPI}/*/*/*'

  DeleteSpeciesLambdaAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DeleteSpeciesLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GardenManagerRestAPI}/*/*/*'
# endregion Lambda

# region API Resources
  GardenManagerRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ['-', [!Ref AppPrefix, 'api', !Ref EnvironmentName]]
      Description: >-
        Routes HTTP requests from the front-end to the lambda functions.
      EndpointConfiguration:
        Types:
          - EDGE
      FailOnWarnings: true
      # See https://webmasters.stackexchange.com/questions/31750/
      # The reason 860 bytes is the minimum size for compression is twofold:
      # 1. The overhead of compressing an object under 860 bytes outweighs performance gain.
      # 2. Objects under 860 bytes can be transmitted via a single packet anyway,
      #    so there isn't a compelling reason to compress them.
      MinimumCompressionSize: 860

  GardenManagerRestAPIAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      Name: GardenManagerRestAPIAuthorizer
      RestApiId: !Ref GardenManagerRestAPI
      Type: COGNITO_USER_POOLS
      ProviderARNs: 
        - !GetAtt WebAppUserPool.Arn
      AuthorizerCredentials: !GetAtt WebAppLambdaRole.Arn
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization

  GardenManagerRestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GardenManagerRestAPI.RootResourceId
      PathPart: api
      RestApiId: !Ref GardenManagerRestAPI

  GardensAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref GardenManagerRestAPIResource
      PathPart: gardens
      RestApiId: !Ref GardenManagerRestAPI

  SpeciesAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref GardenManagerRestAPIResource
      PathPart: species
      RestApiId: !Ref GardenManagerRestAPI

  SpeciesIdAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref SpeciesAPIResource
      PathPart: '{speciesId}'
      RestApiId: !Ref GardenManagerRestAPI

  PublicAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref GardenManagerRestAPIResource
      PathPart: public
      RestApiId: !Ref GardenManagerRestAPI

  PublicSpeciesAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref PublicAPIResource
      PathPart: species
      RestApiId: !Ref GardenManagerRestAPI

  PublicSpeciesIdAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref PublicSpeciesAPIResource
      PathPart: '{speciesId}'
      RestApiId: !Ref GardenManagerRestAPI
# endregion API Resources

# region CORS
  ApiSpeciesCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for /api/species
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref SpeciesAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !If [InLiveEnv, !Sub "'https://${DomainName}'", "'*'"]
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiSpeciesIdCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for /api/species/{speciesId}
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref SpeciesIdAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !If [InLiveEnv, !Sub "'https://${DomainName}'", "'*'"]
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiPublicSpeciesCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for /api/public/species
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref PublicSpeciesAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !If [InLiveEnv, !Sub "'https://${DomainName}'", "'*'"]
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiPublicSpeciesIdCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for /api/public/species/{speciesId}
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref PublicSpeciesIdAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !If [InLiveEnv, !Sub "'https://${DomainName}'", "'*'"]
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiGardensCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for /api/gardens
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref GardensAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !If [InLiveEnv, !Sub "'https://${DomainName}'", "'*'"]
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
# endregion CORS

# region API Methods
  ReadAllPlantsAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Read All Plants Event
      HttpMethod: 'GET'
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref GardenManagerRestAPIAuthorizer
      ResourceId: !Ref SpeciesAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      RequestParameters:
        'method.request.header.Authorization': true
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations'
          - { Lambda: !GetAtt ReadAllPlantsLambda.Arn }

  ReadPlantsAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Read Plants Event
      HttpMethod: 'GET'
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref GardenManagerRestAPIAuthorizer
      ResourceId: !Ref SpeciesIdAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      RequestParameters:
        'method.request.header.Authorization': true
        'method.request.path.speciesId': true
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations'
          - { Lambda: !GetAtt ReadPlantsLambda.Arn }

  ReadAllPublicPlantsAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Read All Plants Event
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      ResourceId: !Ref PublicSpeciesAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations'
          - { Lambda: !GetAtt ReadAllPlantsLambda.Arn }

  ReadPublicPlantsAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Read Plants Event
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      ResourceId: !Ref PublicSpeciesIdAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      RequestParameters:
        'method.request.path.speciesId': true
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations'
          - { Lambda: !GetAtt ReadPlantsLambda.Arn }

  ReadGardenListAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Read Garden List Event
      HttpMethod: 'GET'
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref GardenManagerRestAPIAuthorizer
      ResourceId: !Ref GardensAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      RequestParameters:
        'method.request.header.Authorization': true
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations'
          - { Lambda: !GetAtt ReadGardenListLambda.Arn }

  EditPlantsAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Create/Update Plants Event
      HttpMethod: 'POST'
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref GardenManagerRestAPIAuthorizer
      ResourceId: !Ref SpeciesAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      RequestParameters:
        'method.request.header.Authorization': true
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations'
          - { Lambda: !GetAtt EditPlantsLambda.Arn }

  DeleteSpeciesAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Read Reservation Event
      HttpMethod: 'DELETE'
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref GardenManagerRestAPIAuthorizer
      ResourceId: !Ref SpeciesIdAPIResource
      RestApiId: !Ref GardenManagerRestAPI
      RequestParameters:
        'method.request.header.Authorization': true
        'method.request.path.speciesId': true
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations'
          - { Lambda: !GetAtt DeleteSpeciesLambda.Arn }
# endregion API Methods

  GardenManagerRestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GardenManagerRestAPI
    DependsOn:
      - ReadPublicPlantsAPIMethod
      - ReadAllPublicPlantsAPIMethod
      - ReadAllPlantsAPIMethod
      - ReadPlantsAPIMethod
      - ReadGardenListAPIMethod
      - EditPlantsAPIMethod
      - DeleteSpeciesAPIMethod

  GardenManagerRestAPIStageV1:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref GardenManagerRestAPIDeployment
      RestApiId: !Ref GardenManagerRestAPI
      StageName: v1
      TracingEnabled: true

Outputs:

  CognitoUserPoolId:
    Description: Information about the value
    Value: !Ref WebAppUserPool

  CognitoUserPoolClientId:
    Description: Information about the value
    Value: !Ref WebAppUserPoolClient

  ApiInvokeUrl:
    Description: Information about the value
    Value: !Sub 'https://${GardenManagerRestAPI}.execute-api.${AWS::Region}.amazonaws.com/${GardenManagerRestAPIStageV1}'
